<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>平台管理</title>
</head>
<body>
    <div id='loading'><img src="../../../runtime/loading.gif" alt="Loading..." />加载中......</div>
    <script src="../../../Scripts/Common/json2.js" type="text/javascript"></script>
    <script src="../../../runtime/jsLinb/js/linb-debug.js" type="text/javascript"></script>
    <script src="../../../runtime/jsLinb/js/adv-debug.js" type="text/javascript"></script>
    <script src="../../../Scripts/Common/jquery-1.4.1.js" type="text/javascript"></script>
    <script src="../../../Scripts/Common/Common.js" type="text/javascript"></script>
    <script src="../../../Scripts/Valid/ValReturn.js" type="text/javascript"></script>
 
     <script type="text/javascript">

         Class('App', 'linb.Com', {

             Instance: {

                 initialize: function () {

                     this.autoDestroy = true;

                     this.properties = {};
                 },

                 iniComponents: function () {

                     var host = this, children = [], append = function (child) { children.push(child.get(0)) };

                     append(
                (new linb.DataBinder)
                .setHost(host, "abinder")
                .setName("abinder")
            );

                     append(
                (new linb.DataBinder)
                .setHost(host, "tbinder")
                .setName("tbinder")
            );

                     append(
                (new linb.UI.Panel)
                .setHost(host, "pane")
                .setZIndex(1)
                .setCaption("微信消息管理")
            );

                     host.pane.append(
                (new linb.UI.Tabs)
                .setHost(host, "tab")
                .setItems([{ "id": "a", "caption": "公众号信息" }, { "id": "b", "caption": "消息模板"}])
                .setValue("a")
                .onItemSelected("_tab_onitemselected")
            );

                     host.tab.append(
                (new linb.UI.ToolBar)
                .setHost(host, "toolbar")
                .setItems([{ "id": "grp1", "sub": [{ "id": "a1", "caption": "新增" }, { "id": "a2", "type": "split", "split": true }, { "id": "a3", "caption": "编辑" }, { "id": "a2", "type": "split", "split": true }, { "id": "a4", "caption": "删除"}], "caption": "grp1"}])
                .onClick("_toolbar_onclick")
            , "a");

                     host.tab.append(
                (new linb.UI.TreeGrid)
                .setHost(host, "atreegrid")
                .setSelMode("multibycheckbox")
                .setAltRowsBg(true)
                .setRowNumbered(true)
                .setHeaderHeight(25)
                .setRowHeight(25)
                .setHeader([{ "id": "col1", "width": 200, "type": "input", "caption": "AppId" }, { "id": "col2", "width": 200, "type": "input", "caption": "AppSec" }, { "id": "col3", "width": 200, "type": "input", "caption": "BUrl"}])
                .setValue("")
                .onRowSelected("_atreegrid_onrowselected")
            , "a");

                     host.tab.append(
                (new linb.UI.Dialog)
                .setHost(host, "adlg")
                .setLeft(150)
                .setTop(90)
                .setWidth(540)
                .setHeight(270)
                .setCaption("公众号Config")
                .setMinBtn(false)
                .setMaxBtn(false)
                .setDisplay("none")
            , "a");

                     host.adlg.append(
                (new linb.UI.ToolBar)
                .setHost(host, "atoolbar")
                .setItems([{ "id": "grp1", "sub": [{ "id": "a1", "caption": "确定" }, { "id": "a2", "type": "split", "split": true }, { "id": "a3", "caption": "取消"}], "caption": "grp1"}])
                .onClick("_atoolbar_onclick")
            );

                     host.adlg.append(
                (new linb.UI.Input)
                .setHost(host, "acode")
                .setDataBinder("abinder")
                .setDataField("acode")
                .setLeft(50)
                .setTop(60)
                .setWidth(360)
                .setHeight(25)
                .setDisplay("none")
                .setLabelSize(60)
                .setLabelCaption("Acode")
            );

                     host.adlg.append(
                (new linb.UI.Input)
                .setHost(host, "aid")
                .setDataBinder("abinder")
                .setDataField("id")
                .setLeft(60)
                .setTop(50)
                .setWidth(360)
                .setHeight(25)
                .setDisplay("none")
                .setLabelSize(60)
                .setLabelCaption("aid")
                .setValue("0")
            );

                     host.adlg.append(
                (new linb.UI.Input)
                .setHost(host, "appid")
                .setDataBinder("abinder")
                .setDataField("appid")
                .setLeft(60)
                .setTop(50)
                .setWidth(360)
                .setHeight(25)
                .setLabelSize(60)
                .setLabelCaption("AppId")
            );

                     host.adlg.append(
                (new linb.UI.Input)
                .setHost(host, "appsec")
                .setDataBinder("abinder")
                .setDataField("appsec")
                .setLeft(60)
                .setTop(100)
                .setWidth(360)
                .setHeight(25)
                .setLabelSize(60)
                .setLabelCaption("AppSec")
            );

                     host.adlg.append(
                (new linb.UI.Input)
                .setHost(host, "aurl")
                .setDataBinder("abinder")
                .setDataField("aurl")
                .setLeft(60)
                .setTop(150)
                .setWidth(360)
                .setHeight(50)
                .setLabelSize(60)
                .setLabelCaption("Rurl")
                .setMultiLines(true)
            );

                     host.tab.append(
                (new linb.UI.ToolBar)
                .setHost(host, "ttoolbar")
                .setItems([{ "id": "grp1", "sub": [{ "id": "a1", "caption": "新增" }, { "id": "a2", "type": "split", "split": true }, { "id": "a3", "caption": "编辑" }, { "id": "a2", "type": "split", "split": true }, { "id": "a4", "caption": "删除"}], "caption": "grp1"}])
                .onClick("_ttoolbar_onclick")
            , "b");

                     host.tab.append(
                (new linb.UI.TreeGrid)
                .setHost(host, "ttreegrid")
                .setSelMode("multibycheckbox")
                .setAltRowsBg(true)
                .setRowNumbered(true)
                .setHeaderHeight(25)
                .setRowHeight(25)
                .setHeader([{ "id": "col1", "width": 200, "type": "input", "caption": "模板ID" }, { "id": "col2", "width": 200, "type": "input", "caption": "内容Url" }, { "id": "col3", "width": 100, "type": "input", "caption": "消息标题" }, { "id": "col4", "width": 200, "type": "input", "caption": "消息说明" }, { "id": "col4", "width": 120, "type": "input", "caption": "消息类型"}])
                .setValue("")
                .onRowSelected("_ttreegrid_onrowselected")
            , "b");

                     host.tab.append(
                (new linb.UI.Dialog)
                .setHost(host, "mdlg")
                .setLeft(310)
                .setTop(150)
                .setWidth(580)
                .setHeight(310)
                .setCaption("消息模板")
                .setMinBtn(false)
                .setMaxBtn(false)
                .setDisplay("none")
            , "b");

                     host.mdlg.append(
                (new linb.UI.ToolBar)
                .setHost(host, "attoolbar")
                .setItems([{ "id": "grp1", "sub": [{ "id": "a1", "caption": "确定" }, { "id": "a2", "type": "split", "split": true }, { "id": "a3", "caption": "取消"}], "caption": "grp1"}])
                .onClick("_attoolbar_onclick")
            );

                     host.mdlg.append(
                (new linb.UI.Input)
                .setHost(host, "tid")
                .setDataBinder("tbinder")
                .setDataField("tid")
                .setLeft(60)
                .setTop(50)
                .setWidth(400)
                .setHeight(25)
                .setLabelSize(60)
                .setLabelCaption("模板Id")
            );

                     host.mdlg.append(
                (new linb.UI.Input)
                .setHost(host, "turl")
                .setDataBinder("tbinder")
                .setDataField("turl")
                .setLeft(60)
                .setTop(100)
                .setWidth(400)
                .setHeight(25)
                .setLabelSize(60)
                .setLabelCaption("内容Url")
            );

                     host.mdlg.append(
                (new linb.UI.Input)
                .setHost(host, "ttitle")
                .setDataBinder("tbinder")
                .setDataField("ttitle")
                .setLeft(60)
                .setTop(150)
                .setWidth(400)
                .setHeight(25)
                .setLabelSize(60)
                .setLabelCaption("消息标题")
            );

                     host.mdlg.append(
                (new linb.UI.Input)
                .setHost(host, "tremark")
                .setDataBinder("tbinder")
                .setDataField("tremark")
                .setLeft(60)
                .setTop(200)
                .setWidth(400)
                .setHeight(50)
                .setLabelSize(60)
                .setLabelCaption("消息说明")
                .setMultiLines(true)
            );

                     host.mdlg.append(
                (new linb.UI.ComboInput)
                .setHost(host, "ttype")
                .setDataBinder("tbinder")
                .setDataField("ttype")
                .setLeft(60)
                .setTop(270)
                .setWidth(385)
                .setHeight(25)
                .setDisplay("none")
                .setLabelSize(60)
                .setLabelCaption("模板类型")
                .setType("listbox")
                .setItems([{ "id": "a", "caption": "item a", "image": "img/demo.gif" }, { "id": "b", "caption": "item b", "image": "img/demo.gif" }, { "id": "c", "caption": "item c", "image": "img/demo.gif" }, { "id": "d", "caption": "item d", "image": "img/demo.gif", "disabled": true}])
            );

                     host.mdlg.append(
                (new linb.UI.Input)
                .setHost(host, "id")
                .setDataBinder("tbinder")
                .setDataField("id")
                .setLeft(50)
                .setTop(260)
                .setWidth(400)
                .setHeight(25)
                .setDisplay("none")
                .setLabelSize(60)
                .setLabelCaption("模板Id")
                .setValue("0")
            );

                     host.mdlg.append(
                (new linb.UI.Input)
                .setHost(host, "tcode")
                .setDataBinder("tbinder")
                .setDataField("tcode")
                .setLeft(60)
                .setTop(260)
                .setWidth(400)
                .setHeight(25)
                .setDisplay("none")
                .setLabelSize(60)
                .setLabelCaption("模板Id")
            );

                     return children;

                 },

                 iniExComs: function (com, threadid) {
                 },

                 customAppend: function (parent, subId, left, top) {

                     return false;
                 },

                 events: { "onReady": "_onready" },
                 _onready: function () {
                     ns = this;
                     preurl = "../../../WxChatConfig";
                     //QueryList(1)
                 },

                 _tab_onitemselected: function (profile, item, e, src, type) {
                     var ns = this, uictrl = profile.boxing();
                     if (item.id == "a") {
                         QueryList()
                     }
                     if (item.id == "b") {
                         QueryTempList()
                     }
                 },
                 _toolbar_onclick: function (profile, item, group, e, src) {
                     var ns = this, uictrl = profile.boxing();
                     var sv = ns.atreegrid.getUIValue();
                     if (item.id == "a1") {
                         ns.adlg.setDisplay("block");
                         InitConfig("")
                     }
                     if (item.id == "a3") {
                         if (sv == "" || sv == null) {
                             linb.message("请选择记录");
                             return;
                         }
                         ns.adlg.setDisplay("block");
                         InitConfig(sv)
                     }
                     if (item.id == "a4") {
                         if (sv == "" || sv == null) {
                             linb.message("请选择记录");
                             return;
                         }
                         IDoFun("确定删除记录？", "DelConfig('" + sv + "','false')")
                     }
                 },
                 _ttoolbar_onclick: function (profile, item, group, e, src) {
                     var ns = this, uictrl = profile.boxing();
                     var sv = ns.ttreegrid.getUIValue();
                     if (item.id == "a1") {
                         ns.mdlg.setDisplay("block");
                         InitTemp("")
                     }
                     if (item.id == "a3") {
                         if (sv == "" || sv == null) {
                             linb.message("请选择记录");
                             return;
                         }
                         ns.mdlg.setDisplay("block");
                         InitTemp(sv)
                     }
                     if (item.id == "a4") {
                         if (sv == "" || sv == null) {
                             linb.message("请选择记录");
                             return;
                         }
                         IDoFun("确定删除记录？", "DelTemp('" + sv + "','false')")
                     }
                 },
                 _atoolbar_onclick: function (profile, item, group, e, src) {
                     var ns = this, uictrl = profile.boxing();
                     if (item.id == "a1") {
                         SaveConfig();
                     }
                     else {
                         ns.adlg.setDisplay("none");
                     }
                 },
                 _attoolbar_onclick: function (profile, item, group, e, src) {
                     var ns = this, uictrl = profile.boxing();
                     if (item.id == "a1") {
                         SaveTemp();
                     }
                     else {
                         ns.tdlg.setDisplay("none");
                     }
                 },
                 _atreegrid_onrowselected: function (profile, row, e, src, type) {
                     var ns = this, uictrl = profile.boxing();
                     ns.atreegrid.setValue(row.id);
                 },
                 _ttreegrid_onrowselected: function (profile, row, e, src, type) {
                     var ns = this, uictrl = profile.boxing();
                     ns.ttreegrid.setValue(row.id);
                 }
             },
             Static: {
                 viewSize: { "width": 1280, "height": 1024 }
             }
         });

         linb.UI.setTheme(themes);
         linb.Com.load('App', function () { linb('loading').remove(); }, 'en');
         function InitConfig(v) {
             var o = { "acode": v }
             var url = preurl + "/InitConfig"
             var b = AjaxExb(url, o);
             var r = BackVad(b, "", false)
             if (r) {
                 ns.appid.setValue(r.appid);
                 ns.acode.setValue(r.acode)
                 ns.appsec.setValue(r.appsec)
                 ns.aurl.setValue(r.aurl)
                 ns.aid.setValue(r.id)
             }
             else {

             }
         }
         function DelConfig(v) {
             var o = { "acode": v }
             var url = preurl + "/DelConfig"
             var b = AjaxExb(url, o);
             BackVad(b, "QueryList()", false)
         }
         function SaveConfig() {
             var url = preurl + "/SaveConfig"
             var db = linb.DataBinder.getFromName("abinder");
             var o = db.updateDataFromUI().getData();
             var b = AjaxExb(url, o);
             BackVad(b, "QueryList()", false)
             ns.adlg.setDisplay("none");
         }
         function QueryList() {
             var url = preurl + "/QueryConfigList";
             var b = AjaxEb(url);
             var r = BackVad(b, "", false)
             if (r) {
                 ns.atreegrid.removeAllRows();
                 var arr = new Array();
                 for (i = 1; i < r.length; i++) {
                     var cel = r[i].toString().split(',')
                     arr.push({ "id": cel[0], "cells": [ { "value": cel[1] }, { "value": cel[2] }, { "value": cel[3] }, { "value": cel[4] }, { "value": cel[5] }, { "value": cel[6]}] })
                 }
                 ns.atreegrid.setRows(arr)
             }
         }

         function InitTemp(v) {
             var o = { "tcode": v }
             var url = preurl + "/InitTemp"
             var b = AjaxExb(url, o);
             var r = BackVad(b, "", false)
             if (r) {
                 ns.tcode.setValue(r.tcode);
                 ns.ttype.setValue(r.ttype)
                 ns.turl.setValue(r.turl);
                 ns.ttitle.setValue(r.ttitle)
                 ns.turl.setValue(r.turl)
                 ns.tid.setValue(r.tid)
                 ns.id.setValue(r.id)
                 ns.tremark.setValue(r.tremark)
             }
             else {

             }
         }
         function SaveTemp() {
             var url = preurl + "/SaveTemp"
             var db = linb.DataBinder.getFromName("tbinder");
             var o = db.updateDataFromUI().getData();
             var b = AjaxExb(url, o);
             BackVad(b, "QueryTempList()", false)
             ns.mdlg.setDisplay("none");
         }
         function QueryTempList() {
             var url = preurl + "/QueryTempList";
             var b = AjaxEb(url);
             var r = BackVad(b, "", false)
             if (r) {
                 ns.ttreegrid.removeAllRows();
                 var arr = new Array();
                 for (i = 1; i < r.length; i++) {
                     var cel = r[i].toString().split(',')
                     arr.push({ "id": cel[0], "cells": [{ "value": cel[1] }, { "value": cel[2] }, { "value": cel[3] }, { "value": cel[4] }, { "value": cel[5] }, { "value": cel[6]}] })
                 }
                 ns.ttreegrid.setRows(arr)
             }
         }
         function DelTemp(v) {
             var o = { "tcode": v }
             var url = preurl + "/DelTemp"
             var b = AjaxExb(url, o);
             BackVad(b, "QueryTempList()", false)
         }
     </script>
</body>
</html>
