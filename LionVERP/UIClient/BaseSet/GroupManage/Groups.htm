<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
</head>
<body>
    <div id='loading'><img src="../../../runtime/loading.gif" alt="Loading..." />加载中......</div>
    <script src="../../../Scripts/Common/json2.js" type="text/javascript"></script>
    <script src="../../../runtime/jsLinb/js/linb-debug.js" type="text/javascript"></script>
    <script src="../../../runtime/jsLinb/js/adv-debug.js" type="text/javascript"></script>
    <script src="../../../Scripts/Common/jquery-1.4.1.js" type="text/javascript"></script>
    <script src="../../../Scripts/Common/Common.js" type="text/javascript"></script>
    <script src="../../../Scripts/Valid/ValInput.js" type="text/javascript"></script>
    <script src="../../../Scripts/Valid/ValReturn.js" type="text/javascript"></script>
    <script src="../../../Scripts/Api/IGroup.js" type="text/javascript"></script>
    <script src="../../../Scripts/Api/IUser.js" type="text/javascript"></script>
     <script type="text/javascript">


         Class('App', 'linb.Com', {

             Instance: {initialize: function () {this.autoDestroy = true;this.properties = {};},
             iniComponents: function () {var host = this, children = [], append = function (child) { children.push(child.get(0)) };

             append((new linb.DataBinder).setHost(host, "binder").setName("binder"));

             append((new linb.UI.Panel).setHost(host, "ctl_panel3").setZIndex(1).setCaption("权限组管理").setImage("../../../Image/opeimage/page.gif"));

             host.ctl_panel3.append((new linb.UI.ToolBar).setHost(host, "toolbar").setItems([{ "id": "grp1", "sub": [{ "id": "a1", "caption": "设置", "image": "../../../Image/opeimage/set.gif" }, { "id": "a2", "type": "split", "split": true }, { "id": "a3", "caption": "重置", "image": "../../../Image/opeimage/reset.gif"}], "caption": "grp1"}]).onClick("_toolbar_onclick"));

                     host.ctl_panel3.append(
                (new linb.UI.Layout)
                .setHost(host, "ctl_layout3")
                .setItems([{ "id": "before", "pos": "before", "min": 10, "size": 300, "locked": false, "folded": false, "hidden": false, "cmd": true }, { "id": "main", "min": 10}])
                .setType("horizontal")
            );

                     host.ctl_layout3.append(
                (new linb.UI.Block)
                .setHost(host, "ctl_block3")
                .setDock("fill")
            , "before");

                     host.ctl_block3.append(
                (new linb.UI.ToolBar)
                .setHost(host, "gtoolbar")
                .setItems([{ "id": "grp1", "sub": [{ "id": "a1", "caption": "新增", "image": "../../../Image/opeimage/add.gif" }, { "id": "a2", "type": "split", "split": true }, { "id": "a3", "caption": "编辑", "image": "../../../Image/opeimage/edit.gif" }, { "id": "a2", "type": "split", "split": true }, { "id": "a4", "caption": "删除", "image": "../../../Image/opeimage/del.gif"}], "caption": "grp1"}])
                .onClick("_gtoolbar_onclick")
            );

                     host.ctl_block3.append(
                (new linb.UI.TreeGrid)
                .setHost(host, "gtreegrid")
                .setSelMode("multibycheckbox")
                .setAltRowsBg(true)
                .setRowNumbered(true)
                .setHeaderHeight(28)
                .setRowHeight(25)
                .setHeader([{ "id": "col1", "width": 200, "type": "input", "caption": "权限组"}])
                .setValue("")
                .onRowSelected("_gtreegrid_onrowselected")
            );

                     host.ctl_layout3.append(
                (new linb.UI.Block)
                .setHost(host, "ctl_block4")
                .setDock("fill")
            , "main");

                     host.ctl_block4.append(
                (new linb.UI.TreeGrid)
                .setHost(host, "atreegrid")
                .setSelMode("multibycheckbox")
                .setRowNumbered(true)
                .setHeaderHeight(28)
                .setRowHeight(25)
                .setHeader([{ "id": "col1", "width": 140, "type": "input", "caption": "账号" }, { "id": "col2", "width": 140, "type": "input", "caption": "姓名" }, { "id": "col3", "width": 160, "type": "input", "caption": "部门"}])
                .setValue("")
            );

                     host.ctl_panel3.append(
                (new linb.UI.Dialog)
                .setHost(host, "gDlg")
                .setLeft(131)
                .setTop(151)
                .setWidth(550)
                .setHeight(260)
                .setDisplay("none")
                .setCaption("权限组")
                .setMinBtn(false)
                .setMaxBtn(false)
            );

                     host.gDlg.append(
                (new linb.UI.ToolBar)
                .setHost(host, "gstoolbar")
                .setItems([{ "id": "grp1", "sub": [{ "id": "a1", "caption": "确定" }, { "id": "a2", "type": "split", "split": true }, { "id": "a3", "caption": "取消"}], "caption": "grp1"}])
                .onClick("_gstoolbar_onclick")
            );

                     host.gDlg.append(
                (new linb.UI.Input)
                .setHost(host, "gname")
                .setDataBinder("binder")
                .setDataField("gname")
                .setLeft(50)
                .setTop(60)
                .setWidth(420)
                .setHeight(25)
                .setLabelSize(60)
                .setLabelCaption("组名称")
            );

                     host.gDlg.append(
                (new linb.UI.Input)
                .setHost(host, "gcode")
                .setDataBinder("binder")
                .setDataField("gcode")
                .setReadonly(true)
                .setLeft(50)
                .setTop(100)
                .setWidth(420)
                .setHeight(25)
                .setLabelSize(60)
                .setLabelCaption("组编码")
            );

                     host.gDlg.append((new linb.UI.Input).setHost(host, "gremake").setDataBinder("binder").setDataField("gremake").setLeft(50).setTop(140).setWidth(420).setHeight(50).setLabelSize(60).setLabelCaption("描述").setMultiLines(true));

                     host.gDlg.append((new linb.UI.Input).setHost(host, "gid").setDataBinder("binder").setDataField("gid").setLeft(50).setTop(40).setWidth(420).setHeight(25) .setValue(0).setDisplay("none").setLabelSize(60).setLabelCaption("ID"));

                     return children;
                     // ]]code created by jsLinb UI Builder
                 },

                 iniExComs: function (com, threadid) {
                 },

                 customAppend: function (parent, subId, left, top) {

                     return false;
                 },

                 events: { "onReady": "_onready" },
                 _onready: function () {
                     ns = this;
                     preurl = "../../../UIServer/BaseSet/GroupManage/Groups.aspx";
                     IGroupTable(ns.gtreegrid)
                     IUserTable(ns.atreegrid);
                 },
                 _toolbar_onclick: function (profile, item, group, e, src) {
                     var ns = this, uictrl = profile.boxing();
                     var gv = ns.gtreegrid.getUIValue();
                     var av = ns.atreegrid.getUIValue();
                     if (item.id == "a1") {
                         if (gv == "" || gv == null) {
                             linb.message("请选择组")
                             return
                         }
                         if (av == "" || av == null) {
                             linb.message("请选择账号")
                             return
                         }
                         SetGroupAccount(gv, av);
                     }
                     if (item.id == "a3") {
                         if (gv == "" || gv == null) {
                             linb.message("请选择组")
                             return
                         }
                         IDoFun("确定重置组账号？", "ReSetGroupAccount('" + gv + "')")
                         ;
                     }
                 },
                 _gtoolbar_onclick: function (profile, item, group, e, src) {
                     var ns = this, uictrl = profile.boxing();
                     var gv = ns.gtreegrid.getUIValue();
                     if (item.id == "a1") {
                        ns.gDlg.setDisplay("block")
                        InitGroup("")
                        // linb.include("App.CheckBox", "../../../Scripts/UI/CheckBox.js", function () { var indlg = new App.CheckBox(); indlg.show() })
                     }
                     if (item.id == "a3") {
                         if (gv == "" || gv == null) {
                             linb.message("选择权限组");
                             return
                         }
                         InitGroup(gv)
                         ns.gDlg.setDisplay("block")
                     }
                     if (item.id == "a4") {
                         if (gv == "" || gv == null) {
                             linb.message("选择权限组");
                             return
                         }
                         IDelFun("DelGroup('" + gv + "')")
                     }
                 },
                 _gtreegrid_onrowselected: function (profile, row, e, src, type) {
                     var ns = this, uictrl = profile.boxing();
                     ns.gtreegrid.setValue(row.id)
                     GetGroupAccount(row.id)
                 },
                 _gstoolbar_onclick: function (profile, item, group, e, src) {
                     var ns = this, uictrl = profile.boxing();
                     if (item.id == "a1") {
                         SaveGroup();
                     }
                     else {
                         ns.gDlg.setDisplay("none");
                         InitUnKj()
                     }
                 }
             }
         });
         linb.UI.setTheme(themes);
         linb.Com.load('App', function () { linb('loading').remove(); }, 'en');
         function InitGroup(v) {
             var o = { "gcode": v }
             var url = preurl + "/InitGroup"
             var b = AjaxExb(url, o);
             var r = BackVad(b, "", false)
             if (r) {
                 InitKj(r)
             }
             else {
                 InitUnKj()
             }
         }
         function InitKj(r) {
             ns.gname.setValue(r.gname)
             ns.gcode.setValue(r.gcode)
             ns.gremake.setValue(r.gdetail)
             ns.gid.setValue(r.id)
         }
         function InitUnKj() {
             ns.gname.setValue()
             ns.gcode.setValue()
             ns.gremake.setValue()
             ns.gid.setValue("0")
         }
         function SaveGroup() {
             var url = preurl + "/SaveGroup"
             var db = linb.DataBinder.getFromName("binder");
             var o = db.updateDataFromUI().getData();
             var b = AjaxExb(url, o)
             BackVad(b, "", true)
         }
         function DelGroup(v) {
             var o = { "gcode": v }
             var url = preurl + "/DelSysGroup"
             var b = AjaxExb(url, o);
             BackVad(b, "", true)
         }

         function SetGroupAccount(rv, mv) {
             var o = { "gcode": rv, "accountlist": mv }
             var url = preurl + "/SetGroupAccount"
             var b = AjaxExb(url, o);
             BackVad(b, "", true)
         }
         function ReSetGroupAccount(rv) {
             var o = { "gcode": rv }
             var url = preurl + "/ReSetGroupAccount"
             var b = AjaxExb(url, o);
             var r = BackVad(b, "", true)
         }
         function GetGroupAccount(rv) {
             var o = { "gcode": rv }
             var url = preurl + "/GetGroupAccount"
             var b = AjaxExb(url, o);
             if (b == "") {
                 linb.message("未设置")
             }
             else {
                 ns.atreegrid.setValue(b)
             }
         }
     </script>
</body>
</html>
