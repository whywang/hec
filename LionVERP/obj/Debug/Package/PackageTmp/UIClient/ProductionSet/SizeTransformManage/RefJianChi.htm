<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>减尺设置</title>
</head>
<body>
    <div id='loading'><img src="../../../runtime/loading.gif" alt="Loading..." />加载中......</div>
    <script src="../../../Scripts/Common/json2.js" type="text/javascript"></script>
    <script src="../../../runtime/jsLinb/js/linb-debug.js" type="text/javascript"></script>
    <script src="../../../runtime/jsLinb/js/adv-debug.js" type="text/javascript"></script>
    <script src="../../../Scripts/Common/jquery-1.4.1.js" type="text/javascript"></script>
    <script src="../../../Scripts/Common/Common.js" type="text/javascript"></script>
    <script src="../../../Scripts/Valid/ValReturn.js" type="text/javascript"></script>
    <script src="../../../Scripts/Valid/ValInput.js" type="text/javascript"></script>
    <script src="../../../Scripts/Api/IJc.js" type="text/javascript"></script>
    <script src="../../../Scripts/Api/IInventory.js" type="text/javascript"></script>
     <script type="text/javascript">

         Class('App', 'linb.Com', {

             Instance: {

                 initialize: function () {

                     this.autoDestroy = true;

                     this.properties = {};
                 },

                 iniComponents: function () {

                     var host = this, children = [], append = function (child) { children.push(child.get(0)) };

                     append(
                (new linb.DataBinder)
                .setHost(host, "binder")
                .setName("binder")
            );

                     append(
                (new linb.UI.Panel)
                .setHost(host, "pane")
                .setZIndex(1)
                .setCaption("门套减尺关联设置")
            );

                     host.pane.append(
                (new linb.UI.ToolBar)
                .setHost(host, "stoolbar")
                .setItems([{ "id": "grp1", "sub": [{ "id": "a1", "caption": "设置" }, { "id": "a2", "type": "split", "split": true }, { "id": "a3", "caption": "重置"}], "caption": "grp1"}])
                .onClick("_stoolbar_onclick")
            );

                     host.pane.append(
                (new linb.UI.Layout)
                .setHost(host, "ly")
                .setItems([{ "id": "before", "pos": "before", "min": 10, "size": 300, "locked": false, "folded": false, "hidden": false, "cmd": true }, { "id": "before1", "pos": "before", "min": 10, "size": 300, "locked": false, "folded": false, "hidden": false, "cmd": true }, { "id": "main", "min": 10}])
                .setType("horizontal")
            );

                     host.ly.append(
                (new linb.UI.ToolBar)
                .setHost(host, "ntoolbar")
                .setItems([{ "id": "grp1", "sub": [{ "id": "a1", "caption": "新增" }, { "id": "a2", "type": "split", "split": true }, { "id": "a3", "caption": "编辑" }, { "id": "a2", "type": "split", "split": true }, { "id": "a4", "caption": "删除"}], "caption": "grp1"}])
                .onClick("_ntoolbar_onclick")
            , "main");

                     host.ly.append(
                (new linb.UI.TreeBar)
                .setHost(host, "ttreebar")
                .setItems([{ "id": "node1", "sub": ["node11", { "id": "node12", "image": "img/demo.gif" }, "node13", "node14"], "caption": "node1" }, { "id": "node2", "sub": ["node21", "node22", "node23", "node24"], "caption": "node2"}])
                .setSelMode("multibycheckbox")
                .setValue("")
                .onItemSelected("_ttreebar_onitemselected")
                .beforeExpend("_ttreebar_beforeexpend")
            , "before");

                     host.ly.append(
                (new linb.UI.TreeBar)
                .setHost(host, "mtreebar")
                .setItems([{ "id": "node1", "sub": ["node11", { "id": "node12", "image": "img/demo.gif" }, "node13", "node14"], "caption": "node1" }, { "id": "node2", "sub": ["node21", "node22", "node23", "node24"], "caption": "node2"}])
                .setSelMode("multibycheckbox")
                .setValue("")
                .onItemSelected("_mtreebar_onitemselected")
                .beforeExpend("_mtreebar_beforeexpend")
            , "before1");

                     host.ly.append(
                (new linb.UI.TreeGrid)
                .setHost(host, "rtreegrid")
                .setSelMode("multi")
                .setAltRowsBg(true)
                .setRowNumbered(true)
                .setHeaderHeight(25)
                .setRowHeight(25)
                .setHeader([{ "id": "col1", "width": 140, "type": "input", "caption": "名称" }, { "id": "col2", "width": 80, "type": "input", "caption": "编码" }, { "id": "col3", "width": 80, "type": "input", "caption": "长" }, { "id": "col4", "width": 80, "type": "input", "caption": "宽" }, { "id": "col4", "width": 80, "type": "input", "caption": "厚" }, { "id": "col4", "width": 80, "type": "input", "caption": "范围"}])
                .setValue("")
                .onRowSelected("_rtreegrid_onrowselected")
            , "main");

                     host.pane.append(
                (new linb.UI.Dialog)
                .setHost(host, "rdlg")
                .setLeft(350)
                .setTop(190)
                .setWidth(570)
                .setHeight(231)
                .setCaption("关联减尺")
                .setMinBtn(false)
                .setMaxBtn(false)
                .setDisplay("none")
            );

                     host.rdlg.append(
                (new linb.UI.ToolBar)
                .setHost(host, "rtoolbar")
                .setItems([{ "id": "grp1", "sub": [{ "id": "a1", "caption": "确定" }, { "id": "a2", "type": "split", "split": true }, { "id": "a3", "caption": "取消"}], "caption": "grp1"}])
                .onClick("_rtoolbar_onclick")
            );

                     host.rdlg.append(
                (new linb.UI.Input)
                .setHost(host, "rname")
                .setDataBinder("binder")
                .setDataField("rname")
                .setLeft(20)
                .setTop(50)
                .setWidth(240)
                .setHeight(25)
                .setLabelSize(60)
                .setLabelCaption("名称")
            );

                     host.rdlg.append(
                (new linb.UI.Input)
                .setHost(host, "rcode")
                .setDataBinder("binder")
                .setDataField("rcode")
                .setLeft(260)
                .setTop(50)
                .setWidth(240)
                .setHeight(25)
                .setLabelSize(60)
                .setReadonly(true)
                .setLabelCaption("编码")
            );

                     host.rdlg.append(
                (new linb.UI.Input)
                .setHost(host, "rg")
                .setDataBinder("binder")
                .setDataField("rg")
                .setLeft(20)
                .setTop(100)
                .setWidth(240)
                .setHeight(25)
                .setLabelSize(60)
                .setLabelCaption("高")
                .setValue("0")
            );

                     host.rdlg.append(
                (new linb.UI.Input)
                .setHost(host, "rk")
                .setDataBinder("binder")
                .setDataField("rk")
                .setLeft(260)
                .setTop(100)
                .setWidth(240)
                .setHeight(25)
                .setLabelSize(60)
                .setLabelCaption("宽")
                .setValue("0")
            );

                     host.rdlg.append(
                (new linb.UI.Input)
                .setHost(host, "rh")
                .setDataBinder("binder")
                .setDataField("rh")
                .setLeft(20)
                .setTop(150)
                .setWidth(240)
                .setHeight(25)
                .setLabelSize(60)
                .setLabelCaption("厚")
                .setValue("0")
            );

                     host.rdlg.append(
                (new linb.UI.ComboInput)
                .setHost(host, "rtype")
                  .setDataBinder("binder")
                .setDataField("rtype")
                .setLeft(260)
                .setTop(150)
                .setWidth(225)
                .setHeight(25)
                .setLabelSize(60)
                .setLabelCaption("属性")
                .setType("listbox")
                .setItems([{ "id": "a", "caption": "全部" }, { "id": "p", "caption": "部分"}])
            );

                     host.rdlg.append(
                (new linb.UI.Input)
                .setHost(host, "id")
                .setDataBinder("binder")
                .setDataField("id")
                .setLeft(30)
                .setTop(80)
                .setWidth(240)
                .setHeight(25)
                .setDisplay("none")
                .setLabelSize(60)
                .setValue("0")
            );

                     return children;

                 },

                 iniExComs: function (com, threadid) {
                 },

                 customAppend: function (parent, subId, left, top) {

                     return false;
                 },

                 events: { "onReady": "_onready" },
                 _onready: function () {
                     ns = this;
                     preurl = "../../../UIServer/AccountBusiness/CustomerAccountList.aspx";
                     IinvItems("02", ns.ttreebar);
                     IinvItems("01", ns.mtreebar);
                     QueryList();
                 },

                 _stoolbar_onclick: function (profile, item, group, e, src) {
                     var ns = this, uictrl = profile.boxing();
                     var mtv = ns.ttreebar.getUIValue();
                     if (mtv == "" || mtv == null) {
                         linb.message("请选择门套");
                         return
                     }
                     if (item.id == "a1") {
                         var msv = ns.mtreebar.getUIValue();
                         var rjv = ns.rtreegrid.getUIValue();
                        
                         if (rjv == "" || rjv == null) {
                             linb.message("请选择减尺");
                             return
                         }
                         SetRSize(mtv, msv, rjv)
                     }
                     if (item.id == "a3") {
                         IDoFun("确定重置？", "SetRSize('" + mtv + "','" + msv + "')")
                     }
                 },
                 _ntoolbar_onclick: function (profile, item, group, e, src) {
                     var ns = this, uictrl = profile.boxing();
                     var slv = ns.rtreegrid.getUIValue();
                     if (item.id == "a1") {
                         ns.rdlg.setDisplay("block");
                         InitRSize("")
                     }
                     if (item.id == "a3") {
                         if (slv == null || slv == "") {
                             linb.message("请选择记录");
                             return
                         }
                         ns.rdlg.setDisplay("block");
                         InitRSize(slv)
                     }
                     if (item.id == "a4") {
                         if (slv == null || slv == "") {
                             linb.message("请选择记录");
                             return
                         }
                         IDoFun("确定删除？", "DelRSize('" + slv + "')")
                     }
                 },
                 _rtoolbar_onclick: function (profile, item, group, e, src) {
                     var ns = this, uictrl = profile.boxing();
                     if (item.id == "a1") {
                         SaveRSize();
                     }
                     else {
                         ns.rdlg.setDisplay("none");
                     }
                 },
                 _ttreebar_onitemselected: function (profile, item, e, src, type) {
                     var ns = this, uictrl = profile.boxing();
                     if (item.sub) {
                         ns.ttreebar.setValue("");
                     }
                     else {
                         var mv = ns.mtreebar.getUIValue()
                         ns.ttreebar.setValue(item.id);
                         GetRSize(item.id, mv) 
                     }
                 },
                 _ttreebar_beforeexpend: function (profile, item) {
                     var ns = this, uictrl = profile.boxing();
                     IinvCItems(item, ns.ttreebar)
                 },
                 _mtreebar_onitemselected: function (profile, item, e, src, type) {
                     var ns = this, uictrl = profile.boxing();
                     if (item.sub) {
                         ns.mtreebar.setValue("");
                     }
                     else {
                         var tv = ns.ttreebar.getUIValue()
                         ns.mtreebar.setValue(item.id);
                         GetRSize(tv,item.id ) 
                     }
                     
                 },
                 _mtreebar_beforeexpend: function (profile, item) {
                     var ns = this, uictrl = profile.boxing();
                     IinvCItems(item, ns.mtreebar)
                 },
                 _rtreegrid_onrowselected: function (profile, row, e, src, type) {
                     var ns = this, uictrl = profile.boxing();
                     ns.rtreegrid.setValue(row.id)
                 }
             },
             Static: {
                 viewSize: { "width": 1024, "height": 768 }
             }
         });
         linb.UI.setTheme(themes);
         linb.Com.load('App', function () { linb('loading').remove(); }, 'en');
         function InitRSize(v) {
             var o = { "rjcode": v }
             var url = "../../../RefSizeFomate/InitRsize"
             var b = AjaxExb(url, o);
             var r = BackVad(b, "", false)
             if (r) {
                 ns.id.setValue(r.id);
                 ns.rname.setValue(r.rjname);
                 ns.rcode.setValue(r.rjcode);
                 ns.rg.setValue(r.rheight);
                 ns.rk.setValue(r.rwidth);
                 ns.rh.setValue(r.rdeep);
                 ns.rtype.setValue(r.rtype);
             }
         }
         function SaveRSize() {
             var url = "../../../RefSizeFomate/SaveRsize"
             var db = linb.DataBinder.getFromName("binder");
             var o = db.updateDataFromUI().getData();
             var b = AjaxExb(url, o)
             BackVad(b, " QueryList()", false);
             ns.rdlg.setDisplay("none");
         }
         function DelRSize(v) {
             var o = { "rcode": v }
             var url = "../../../RefSizeFomate/DelRSize"
             var b = AjaxExb(url, o);
             BackVad(b, " QueryList()", false)
         }
         function QueryList() {
             var url = "../../../RefSizeFomate/QueryList";
             var b = AjaxEb(url);
             var r = BackVad(b, "", false)
             if (r) {
                 ns.rtreegrid.removeAllRows();
                 var arr = new Array();
                 for (i = 1; i < r.length; i++) {
                     var cel = r[i].toString().split(',')
                     arr.push({ "id": cel[0], "cells": [{ "value": cel[1] }, { "value": cel[0] }, { "value": cel[2] }, { "value": cel[3] }, { "value": cel[4] }, { "value": cel[5]}] })
                 }
                 ns.rtreegrid.setRows(arr)
             }
         }
         function SetRSize(mtv, msv, rjv) {
             if (msv == null ||msv == "") {
                 if (CheckRSizeType(rjv) != "a") {
                     linb.message("请选择门扇产品");
                     return
                 }
             }
             else {
                 if (CheckRSizeType(rjv) == "a") {
                     linb.message("请不要选择门扇产品");
                     return
                 }
             }
             var o = { "mtcode": mtv, "mscode": msv, "rjcode": rjv }
             var url = "../../../RefSizeFomate/SetMtMsSize"
             var b = AjaxExb(url, o);
             BackVad(b, "", false)
         }
         function ReSetRSize(mtv, msv) {
             var o = { "mtcode": mtv, "mscode": msv }
             var url = "../../../RefSizeFomate/ReSetMtMsSize"
             var b = AjaxExb(url, o);
             BackVad(b, "", false)
         }
         function GetRSize(tv, mv) {
             if (tv != "" && tv != null ) {
                 var o = { "mtcode": tv, "mscode": mv }
                 var url = "../../../RefSizeFomate/GetMtMsSize"
                 var b = AjaxExb(url, o);
                 ns.rtreegrid.setValue(b)
             }

         }
         function CheckRSizeType(v) {
             var o = { "rjcode": v }
             var url = "../../../RefSizeFomate/InitRsize"
             var b = AjaxExb(url, o);
             var r = BackVad(b, "", false)
             if (r) {
                 return r.rtype;
             }
             else {
                 return "";
             }
         }
     </script>
</body>
</html>
